/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 */
class Solution {
    public int[] searchRange(int[] nums, int target) {
       
      int[] ans = {-1, -1};
        
        // Edge case: If the array is empty, return [-1, -1]
        if (nums.length == 0) {
            return ans;
        }

        // Find the first occurrence and last occurrence of the target
        ans[0] = firstOccurrence(nums, target);
        ans[1] = lastOccurrence(nums, target);

        return ans;
    }
    
    // Method to find the first occurrence of the target
    public int firstOccurrence(int[] nums, int target) {
        int result = -1;   
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                result = mid; // Record the index
                right = mid - 1; // Continue searching on the left side
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }

    // Method to find the last occurrence of the target
    public int lastOccurrence(int[] nums, int target) {
        int result = -1;   
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                result = mid; // Record the index
                left = mid + 1; // Continue searching on the right side
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
    
     
}
/*Given an integer n, return the number of prime numbers that are strictly less than n.
*/

class Solution {
    public int countPrimes(int n) {
      if (n <= 2) {  // Edge case: no primes less than 2
            return 0;
        }

        boolean[] prime = new boolean[n];  // Correct size for the prime array
        Arrays.fill(prime, true);  // Assume all numbers are prime initially
        prime[0] = false;  // 0 is not a prime number
        prime[1] = false;  // 1 is not a prime number

        // Implement Sieve of Eratosthenes
        for (int i = 2; i * i < n; i++) {
            if (prime[i]) {
                for (int j = i * i; j < n; j += i) {  // Correct loop logic
                    prime[j] = false;
                }
            }
        }

        // Count the number of primes
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (prime[i]) {
                count++;
            }
        }

        return count;
}
}